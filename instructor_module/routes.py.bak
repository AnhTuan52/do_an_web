from flask import Blueprint, request, jsonify, session
from bson.objectid import ObjectId
from datetime import datetime
import json
import logging
from .student_schema import ensure_student_schema, normalize_students_list, DEFAULT_GRADES_SCHEMA

# Hàm tiện ích để chuyển đổi đối tượng datetime thành chuỗi
def json_serializable(obj):
    """Chuyển đổi các đối tượng không thể serialize thành JSON"""
    if isinstance(obj, datetime):
        return obj.strftime("%Y-%m-%d %H:%M:%S")
    elif isinstance(obj, ObjectId):
        return str(obj)
    elif hasattr(obj, '__dict__'):
        return obj.__dict__
    else:
        return str(obj)

# Lấy logger
logger = logging.getLogger(__name__)

# Blueprint sẽ được đăng ký trong init_app
instructor_bp = Blueprint('instructor', __name__)

# Các biến toàn cục sẽ được gán giá trị khi đăng ký blueprint
mongo = None
instructors_collection = None
offered_courses_collection = None
courses_collection = None
registered_courses_collection = None
students_collection = None
curriculum_collection = None

# Hàm kiểm tra quyền giáo viên
def instructor_required(f):
    def decorated_function(*args, **kwargs):
        # In ra thông tin session để debug
        logger.debug(f"Session data in decorator: {dict(session)}")
        
        # Kiểm tra xem có đang ở chế độ debug không
        debug_mode = False  # Tắt chế độ debug trong môi trường production
        
        if debug_mode:
            # BYPASS AUTHENTICATION FOR DEBUGGING
            logger.warning("Authentication check bypassed for debugging")
            return f(*args, **kwargs)
        
        # Kiểm tra quyền giáo viên
        if 'role' not in session or session['role'] != 'instructor':
            logger.warning(f"Không có quyền giáo viên: {dict(session)}")
            return jsonify({"status": "error", "message": "Bạn không có quyền truy cập trang này"}), 403
            
        if 'instructor_id' not in session:
            logger.warning(f"Không tìm thấy instructor_id trong session: {dict(session)}")
            return jsonify({"status": "error", "message": "Vui lòng đăng nhập lại"}), 401
            
        return f(*args, **kwargs)
    decorated_function.__name__ = f.__name__
    return decorated_function

# Lấy thông tin giáo viên
@instructor_bp.route('/profile', methods=['GET'])
@instructor_required
def get_instructor_profile():
    instructor_id = session.get('instructor_id')
    if not instructor_id:
        return jsonify({"status": "error", "message": "Không tìm thấy thông tin giáo viên"}), 404
    
    try:
        # Thử chuyển đổi instructor_id thành ObjectId nếu nó là chuỗi
        try:
            if isinstance(instructor_id, str):
                instructor_id_obj = ObjectId(instructor_id)
            else:
                instructor_id_obj = instructor_id
        except Exception as e:
            logger.error(f"Lỗi chuyển đổi instructor_id: {str(e)}")
            return jsonify({"status": "error", "message": "ID giảng viên không hợp lệ"}), 400
            
        instructor = instructors_collection.find_one({"_id": instructor_id_obj})
        if not instructor:
            # Thử tìm kiếm bằng instructor_id dưới dạng chuỗi
            instructor = instructors_collection.find_one({"instructor_id": instructor_id})
            
        if not instructor:
            logger.error(f"Không tìm thấy giảng viên với ID: {instructor_id}")
            return jsonify({"status": "error", "message": "Không tìm thấy thông tin giáo viên"}), 404
        
        # Chuyển đổi ObjectId thành string
        instructor_data = {}
        for key, value in instructor.items():
            if key == '_id':
                instructor_data[key] = str(value)
            elif isinstance(value, datetime):
                instructor_data[key] = value.strftime("%Y-%m-%d %H:%M:%S")
            elif isinstance(value, ObjectId):
                instructor_data[key] = str(value)
            else:
                instructor_data[key] = value
        
        return jsonify({"status": "success", "data": instructor_data})
    except Exception as e:
        logger.error(f"Lỗi khi lấy thông tin giảng viên: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

# Lấy danh sách các khóa học đã mở của giáo viên
@instructor_bp.route('/courses', methods=['GET'])
@instructor_required
def get_instructor_courses():
    logger.info("=== TRUY VẤN DANH SÁCH MÔN HỌC GIẢNG VIÊN ===")
    
    # Lấy instructor_id từ query parameter (ưu tiên)
    instructor_id = request.args.get('instructor_id')
    if instructor_id:
        logger.info(f"Sử dụng instructor_id từ query parameter: {instructor_id}")
    else:
        # Nếu không có trong query, lấy từ session
        instructor_id = session.get('instructor_id')
        logger.info(f"Sử dụng instructor_id từ session: {instructor_id}")
        
        # Kiểm tra thông tin session
        logger.debug(f"Session data: {dict(session)}")
    
    # Nếu vẫn không có, sử dụng ID cố định (cho mục đích demo)
    if not instructor_id:
        instructor_id = "60d5ec9af682fbd12a8952d1"  # ID cố định của giảng viên mẫu
        logger.info(f"Sử dụng instructor_id mặc định: {instructor_id}")
    
    try:
        # Chuyển đổi instructor_id thành ObjectId
        try:
            instructor_obj_id = ObjectId(instructor_id)
        except Exception as e:
            logger.warning(f"Không thể chuyển đổi instructor_id thành ObjectId: {str(e)}")
            return jsonify({"status": "error", "message": "ID giảng viên không hợp lệ"}), 400
        
        # Lấy thông tin giảng viên
        instructor = instructors_collection.find_one({'_id': instructor_obj_id})
        if not instructor:
            logger.warning(f"Không tìm thấy thông tin giảng viên với ID: {instructor_id}")
            return jsonify({"status": "error", "message": "Không tìm thấy thông tin giảng viên"}), 404
        
        instructor_info = {
            "_id": str(instructor['_id']),
            "full_name": instructor.get('personal_info', {}).get('full_name', 'N/A'),
            "instructor_id": instructor.get('instructor_id', 'N/A'),
            "email": instructor.get('contact', {}).get('email', 'N/A'),
            "degree": instructor.get('academic_info', {}).get('degree', 'N/A'),
            "specialization": instructor.get('academic_info', {}).get('specialization', 'N/A'),
            "research_interests": instructor.get('academic_info', {}).get('research_interests', [])
        }
        
        # Lấy danh sách khóa học đang dạy
        offered_courses = offered_courses_collection.find({
            'instructor_id': instructor_obj_id
        })
        
        courses_data = []
        for offered_course in offered_courses:
            # Lấy thông tin chi tiết khóa học
            course_info = None
            if 'course_id' in offered_course:
                course_id = offered_course['course_id']
                if isinstance(course_id, str):
                    try:
                        course_id = ObjectId(course_id)
                    except:
                        pass
                course_info = courses_collection.find_one({'_id': course_id})
            
            # Tạo dữ liệu khóa học
            course_data = {
                "_id": str(offered_course['_id']),
                "course_id": str(offered_course.get('course_id')) if offered_course.get('course_id') else None,
                "course_name": offered_course.get('course_name') or (course_info.get('title') if course_info else 'N/A'),
                "course_code": offered_course.get('course_code') or (course_info.get('code') if course_info else 'N/A'),
                "class_code": offered_course.get('class_code', 'N/A'),
                "semester": offered_course.get('semester', 'N/A'),
                "academic_year": offered_course.get('academic_year', 'N/A'),
                "schedule": offered_course.get('schedule', []),
                "location": offered_course.get('location', 'N/A'),
                "status": offered_course.get('status', 'active'),
                "students_count": len(offered_course.get('students', [])),
                "max_enrollment": offered_course.get('max_enrollment', 0)
            }
            
            courses_data.append(course_data)
        
        # Chuyển đổi các đối tượng datetime trong courses_data
        for course in courses_data:
            if 'schedule' in course and isinstance(course['schedule'], list):
                for schedule_item in course['schedule']:
                    if isinstance(schedule_item, dict):
                        for key, value in schedule_item.items():
                            if isinstance(value, datetime):
                                schedule_item[key] = value.strftime("%H:%M:%S")
        
        return jsonify({
            "status": "success", 
            "data": courses_data,
            "instructor": instructor_info,
            "courses": courses_data
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy danh sách khóa học của giảng viên: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy chi tiết khóa học theo ID
@instructor_bp.route('/courses/<course_id>', methods=['GET'])
@instructor_bp.route('/classes/<course_id>', methods=['GET'])  # Thêm endpoint classes để hỗ trợ cả hai loại URL
@instructor_required
def get_course_by_id(course_id):
    logger.info(f"=== LẤY CHI TIẾT KHÓA HỌC: {course_id} ===")
    logger.info(f"ENDPOINT ĐƯỢC GỌI: {request.path}")
    logger.info(f"METHOD: {request.method}")
    logger.info(f"REMOTE ADDR: {request.remote_addr}")
    
    # Log thông tin session để debug
    logger.info(f"Session data: {dict(session)}")
    logger.info(f"Request headers: {dict(request.headers)}")
    logger.info(f"Request method: {request.method}")
    logger.info(f"Request path: {request.path}")
    logger.info(f"Request args: {dict(request.args)}")
    
    # Thêm biến để theo dõi quá trình xử lý
    debug_info = {
        "course_id": course_id,
        "steps": []
    }
    
    try:
        # Chuyển đổi ID thành ObjectId
        try:
            logger.info(f"Đang chuyển đổi ID: {course_id} thành ObjectId")
            course_obj_id = ObjectId(course_id)
            logger.info(f"Chuyển đổi thành công: {course_obj_id}")
            debug_info["steps"].append("Chuyển đổi ID thành ObjectId thành công")
            debug_info["object_id"] = str(course_obj_id)
        except Exception as e:
            logger.warning(f"ID khóa học không hợp lệ: {course_id}, lỗi: {str(e)}")
            debug_info["steps"].append(f"Lỗi chuyển đổi ID: {str(e)}")
            return jsonify({
                "status": "error", 
                "message": f"ID khóa học không hợp lệ: {str(e)}",
                "debug_info": debug_info
            }), 400
        
        # Lấy thông tin khóa học từ offered_courses
        logger.info(f"Đang truy vấn offered_courses với ID: {course_obj_id}")
        debug_info["steps"].append(f"Truy vấn offered_courses với ID: {course_obj_id}")
        
        offered_course = offered_courses_collection.find_one({'_id': course_obj_id})
        debug_info["query_result"] = "Tìm thấy" if offered_course else "Không tìm thấy"
        
        if not offered_course:
            logger.warning(f"Không tìm thấy khóa học với ID: {course_id}")
            debug_info["steps"].append("Không tìm thấy khóa học với ObjectId")
            
            # Thử tìm kiếm với các điều kiện khác
            logger.info("Thử tìm kiếm với ID dạng chuỗi")
            debug_info["steps"].append("Thử tìm kiếm với ID dạng chuỗi")
            
            offered_course = offered_courses_collection.find_one({'_id': course_id})
            debug_info["string_id_query_result"] = "Tìm thấy" if offered_course else "Không tìm thấy"
            
            if not offered_course:
                # Log tất cả các ID trong collection để debug
                all_ids = [str(doc.get('_id')) for doc in offered_courses_collection.find({}, {'_id': 1}).limit(10)]
                logger.info(f"Các ID có trong collection (top 10): {all_ids}")
                debug_info["steps"].append("Không tìm thấy với cả hai cách")
                debug_info["sample_ids"] = all_ids
                
                # Thử tìm kiếm với các điều kiện khác
                debug_info["steps"].append("Thử tìm kiếm với các điều kiện khác")
                other_courses = list(offered_courses_collection.find().limit(3))
                if other_courses:
                    debug_info["other_courses_sample"] = [{
                        "_id": str(c.get("_id")),
                        "course_name": c.get("course_name", "N/A"),
                        "course_code": c.get("course_code", "N/A")
                    } for c in other_courses]
                
                return jsonify({
                    "status": "error", 
                    "message": "Không tìm thấy khóa học",
                    "debug_info": debug_info
                }), 404
        
        # Lấy thông tin giảng viên
        instructor = None
        if 'instructor_id' in offered_course:
            instructor_id = offered_course['instructor_id']
            if isinstance(instructor_id, str):
                try:
                    instructor_id = ObjectId(instructor_id)
                except:
                    pass
            instructor = instructors_collection.find_one({'_id': instructor_id})
        
        # Xử lý dữ liệu sinh viên
        students_data = []
        if 'students' in offered_course and isinstance(offered_course['students'], list):
            for student_info in offered_course['students']:
                try:
                    student_id = student_info.get('student_id')
                    if isinstance(student_id, str):
                        try:
                            student_id = ObjectId(student_id)
                        except:
                            continue
                    
                    # Lấy thêm thông tin từ collection students nếu cần
                    student = students_collection.find_one({'_id': student_id})
                    
                    # Kết hợp thông tin từ cả hai nguồn, ngay cả khi không tìm thấy student trong collection
                    student_data = {
                        "student_id": str(student_id),
                        "mssv": student_info.get('mssv') or (student.get('mssv', 'N/A') if student else 'N/A'),
                        "full_name": student_info.get('full_name') or (student.get('personal_info', {}).get('full_name', 'N/A') if student else student_info.get('mssv', 'N/A')),
                        "email": student_info.get('email') or (student.get('personal_info', {}).get('email', {}).get('school', 'N/A') if student else 'N/A'),
                        "class": (student.get('personal_info', {}).get('class', 'N/A') if student else 'N/A'),
                        "grades": student_info.get('grades', DEFAULT_GRADES_SCHEMA.copy())
                    }
                    students_data.append(student_data)
                except Exception as e:
                    logger.error(f"Lỗi khi xử lý thông tin sinh viên: {str(e)}")
        
        # Thêm thông tin debug
        debug_info["steps"].append("Đã xử lý thông tin sinh viên")
        debug_info["student_count"] = len(students_data)
        
        # Tạo dữ liệu trả về trực tiếp từ offered_courses
        course_data = {
            "_id": str(offered_course['_id']),
            "instructor_id": str(offered_course.get('instructor_id')) if offered_course.get('instructor_id') else None,
            "course_name": offered_course.get('course_name', 'N/A'),
            "course_code": offered_course.get('course_code', 'N/A'),
            "class_code": offered_course.get('class_code', 'N/A'),
            "semester": offered_course.get('semester', 'N/A'),
            "academic_year": offered_course.get('academic_year', 'N/A'),
            "schedule": offered_course.get('schedule', []),
            "location": offered_course.get('location', 'N/A'),
            "max_enrollment": offered_course.get('max_enrollment', 0),
            "status": offered_course.get('status', 'active'),
            "students": students_data,
            "instructor": {
                "_id": str(instructor['_id']) if instructor else None,
                "full_name": instructor.get('personal_info', {}).get('full_name', 'N/A') if instructor else 'N/A',
                "email": instructor.get('contact', {}).get('email', 'N/A') if instructor else 'N/A'
            },
            "grading_schema": offered_course.get('grading_schema', {}),
            "created_at": offered_course.get('created_at', datetime.now()).isoformat() if hasattr(offered_course.get('created_at', None), 'isoformat') else str(offered_course.get('created_at', '')),
            "updated_at": offered_course.get('updated_at', datetime.now()).isoformat() if hasattr(offered_course.get('updated_at', None), 'isoformat') else str(offered_course.get('updated_at', ''))
        }
        
        # Thêm thông tin debug vào phản hồi
        debug_info["steps"].append("Chuẩn bị trả về dữ liệu thành công")
        
        response_data = {
            "status": "success",
            "message": "Lấy chi tiết khóa học thành công",
            "course": course_data,
            "data": course_data,  # Thêm trường data để tương thích với các API khác
            "debug_info": debug_info
        }
        
        logger.info(f"Phản hồi API thành công với {len(students_data)} sinh viên")
        return jsonify(response_data)
    except Exception as e:
        logger.error(f"Lỗi khi lấy chi tiết khóa học: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API cập nhật điểm số của sinh viên
@instructor_bp.route('/courses/<course_id>/students/<student_id>/grades', methods=['PUT'])
@instructor_required
def update_student_grades(course_id, student_id):
    logger.info(f"=== TÍNH NĂNG CẬP NHẬT ĐIỂM SỐ CHO SINH VIÊN ĐÃ BỊ VÔ HIỆU HÓA ===")
    
    # Uncomment the code below and remove the return statement to enable this feature
    return jsonify({
        "status": "error",
        "message": "Tính năng quản lý sinh viên đã bị vô hiệu hóa theo yêu cầu"
    }), 403
    
    # The code below is currently disabled
    
# API đăng ký khóa học mới
@instructor_bp.route('/register-course', methods=['POST'])
@instructor_required
def register_course():
    logger.info("=== ĐĂNG KÝ KHÓA HỌC MỚI ===")
    
    try:
        # Lấy dữ liệu từ request
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "Dữ liệu không hợp lệ"}), 400
        
        # Lấy instructor_id từ session
        instructor_id = session.get('instructor_id')
        if not instructor_id:
            return jsonify({"status": "error", "message": "Không tìm thấy thông tin giảng viên"}), 401
        
        # Chuyển đổi instructor_id thành ObjectId
        try:
            instructor_obj_id = ObjectId(instructor_id)
        except Exception as e:
            logger.warning(f"ID giảng viên không hợp lệ: {e}")
            return jsonify({"status": "error", "message": "ID giảng viên không hợp lệ"}), 400
        
        # Tạo khóa học mới
        new_course = {
            "course_id": ObjectId(data.get('course_id')) if data.get('course_id') else None,
            "instructor_id": instructor_obj_id,
            "course_name": data.get('course_name', ''),
            "course_code": data.get('course_code', ''),
            "class_code": data.get('class_code', ''),
            "semester": data.get('semester', ''),
            "academic_year": data.get('academic_year', ''),
            "schedule": data.get('schedule', []),
            "location": data.get('location', ''),
            "max_enrollment": data.get('max_enrollment', 0),
            "status": "active",
            "students": [],
            "grading_schema": data.get('grading_schema', {}),
            "created_at": datetime.now(),
            "updated_at": datetime.now()
        }
        
        # Thêm vào cơ sở dữ liệu
        result = offered_courses_collection.insert_one(new_course)
        
        # Cập nhật danh sách khóa học của giảng viên
        instructors_collection.update_one(
            {'_id': instructor_obj_id},
            {'$addToSet': {'courses_taught': result.inserted_id}}
        )
        
        return jsonify({
            "status": "success",
            "message": "Đăng ký khóa học thành công",
            "course_id": str(result.inserted_id)
        })
    except Exception as e:
        logger.error(f"Lỗi khi đăng ký khóa học: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy danh sách sinh viên trong khóa học
@instructor_bp.route('/course-students/<offered_course_id>', methods=['GET'])
@instructor_required
def get_course_students(offered_course_id):
    logger.info(f"=== TÍNH NĂNG LẤY DANH SÁCH SINH VIÊN ĐÃ BỊ VÔ HIỆU HÓA ===")
    
    return jsonify({
        "status": "error",
        "message": "Tính năng quản lý sinh viên đã bị vô hiệu hóa theo yêu cầu"
    }), 403
           # return jsonify({"status": "error", "message": "ID khóa học không hợp lệ"}), 400
        
       

# API cập nhật điểm số
@instructor_bp.route('/update-grade', methods=['POST', 'OPTIONS'])
@instructor_required
def update_grade():
    # Xử lý yêu cầu OPTIONS (CORS preflight)
    if request.method == 'OPTIONS':
        response = jsonify({'status': 'ok'})
        response.headers['Access-Control-Allow-Origin'] = '*'
        response.headers['Access-Control-Allow-Methods'] = 'POST, OPTIONS'
        response.headers['Access-Control-Allow-Headers'] = 'Content-Type'
        return response
    
    logger.info("=== CẬP NHẬT ĐIỂM SỐ ===")
    
    try:
        # Lấy dữ liệu từ request
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "Dữ liệu không hợp lệ"}), 400
        
        offered_course_id = data.get('offered_course_id')
        student_id = data.get('student_id')
        grades = data.get('grades')
        
        if not offered_course_id or not student_id or not grades:
            return jsonify({"status": "error", "message": "Thiếu thông tin cần thiết"}), 400
        
        # Chuyển đổi ID thành ObjectId
        try:
            course_obj_id = ObjectId(offered_course_id)
            student_obj_id = ObjectId(student_id)
        except Exception as e:
            logger.warning(f"ID không hợp lệ: {e}")
            return jsonify({"status": "error", "message": "ID không hợp lệ"}), 400
        
        # Lấy thông tin khóa học
        offered_course = offered_courses_collection.find_one({'_id': course_obj_id})
        if not offered_course:
            logger.warning(f"Không tìm thấy khóa học với ID: {offered_course_id}")
            return jsonify({"status": "error", "message": "Không tìm thấy khóa học"}), 404
        
        # Kiểm tra xem sinh viên có trong danh sách không
        student_found = False
        students = offered_course.get('students', [])
        
        for i, student in enumerate(students):
            if student.get('student_id') == student_obj_id:
                student_found = True
                # Cập nhật điểm số
                students[i]['grades'] = grades
                break
        
        if not student_found:
            logger.warning(f"Không tìm thấy sinh viên {student_id} trong khóa học {offered_course_id}")
            return jsonify({"status": "error", "message": "Không tìm thấy sinh viên trong khóa học"}), 404
        
        # Cập nhật vào cơ sở dữ liệu
        result = offered_courses_collection.update_one(
            {'_id': course_obj_id},
            {'$set': {'students': students, 'updated_at': datetime.now()}}
        )
        
        if result.modified_count == 0:
            logger.warning("Không có thay đổi nào được cập nhật")
            return jsonify({
                "status": "warning", 
                "message": "Không có thay đổi nào được cập nhật"
            }), 200
        
        logger.info(f"Đã cập nhật điểm thành công cho sinh viên {student_id}")
        
        return jsonify({
            "status": "success", 
            "message": "Cập nhật điểm số thành công"
        })
    except Exception as e:
        logger.error(f"Lỗi khi cập nhật điểm: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy chi tiết khóa học
@instructor_bp.route('/course-detail/<offered_course_id>', methods=['GET', 'OPTIONS'])
@instructor_required
def get_course_detail(offered_course_id):
    # Xử lý yêu cầu OPTIONS (CORS preflight)
    if request.method == 'OPTIONS':
        response = jsonify({'status': 'ok'})
        response.headers['Access-Control-Allow-Origin'] = '*'
        response.headers['Access-Control-Allow-Methods'] = 'GET, OPTIONS'
        response.headers['Access-Control-Allow-Headers'] = 'Content-Type'
        return response
    
    logger.info(f"=== LẤY CHI TIẾT KHÓA HỌC: {offered_course_id} ===")
    
    try:
        # Chuyển đổi ID thành ObjectId
        try:
            course_obj_id = ObjectId(offered_course_id)
        except Exception as e:
            logger.warning(f"ID khóa học không hợp lệ: {offered_course_id}")
            return jsonify({"status": "error", "message": "ID khóa học không hợp lệ"}), 400
        
        # Lấy thông tin khóa học
        offered_course = offered_courses_collection.find_one({'_id': course_obj_id})
        if not offered_course:
            logger.warning(f"Không tìm thấy khóa học với ID: {offered_course_id}")
            return jsonify({"status": "error", "message": "Không tìm thấy khóa học"}), 404
        
        # Lấy thông tin chi tiết khóa học
        course_info = None
        if 'course_id' in offered_course:
            course_id = offered_course['course_id']
            if isinstance(course_id, str):
                try:
                    course_id = ObjectId(course_id)
                except:
                    pass
            course_info = courses_collection.find_one({'_id': course_id})
        
        # Lấy thông tin giảng viên
        instructor = None
        if 'instructor_id' in offered_course:
            instructor_id = offered_course['instructor_id']
            if isinstance(instructor_id, str):
                try:
                    instructor_id = ObjectId(instructor_id)
                except:
                    pass
            instructor = instructors_collection.find_one({'_id': instructor_id})
        
        # Xử lý dữ liệu sinh viên
        students_data = []
        if 'students' in offered_course and isinstance(offered_course['students'], list):
            for student_info in offered_course['students']:
                try:
                    student_id = student_info.get('student_id')
                    if isinstance(student_id, str):
                        try:
                            student_id = ObjectId(student_id)
                        except:
                            continue
                    
                    # Lấy thông tin sinh viên
                    student = students_collection.find_one({'_id': student_id})
                    if student:
                        student_data = {
                            "student_id": str(student_id),
                            "mssv": student.get('mssv', 'N/A'),
                            "full_name": student.get('personal_info', {}).get('full_name', 'N/A'),
                            "email": student.get('personal_info', {}).get('email', {}).get('school', 'N/A'),
                            "class": student.get('personal_info', {}).get('class', 'N/A'),
                            "grades": student_info.get('grades', {})
                        }
                        students_data.append(student_data)
                except Exception as e:
                    logger.error(f"Lỗi khi xử lý thông tin sinh viên: {str(e)}")
        
        # Tạo dữ liệu trả về
        course_name = offered_course.get('course_name', 'N/A')
        course_code = offered_course.get('course_code', 'N/A')
        
        if course_info:
            course_name = course_info.get('title') or course_info.get('name') or course_name
            course_code = course_info.get('code') or course_info.get('subject_code') or course_code
        
        course_data = {
            "_id": str(offered_course['_id']),
            "course_id": str(offered_course.get('course_id')) if offered_course.get('course_id') else None,
            "instructor_id": str(offered_course.get('instructor_id')) if offered_course.get('instructor_id') else None,
            "course_name": course_name,
            "course_code": course_code,
            "class_code": offered_course.get('class_code', 'N/A'),
            "semester": offered_course.get('semester', 'N/A'),
            "academic_year": offered_course.get('academic_year', 'N/A'),
            "schedule": offered_course.get('schedule', []),
            "location": offered_course.get('location', 'N/A'),
            "max_enrollment": offered_course.get('max_enrollment', 0),
            "status": offered_course.get('status', 'active'),
            "students": students_data,
            "instructor": {
                "_id": str(instructor['_id']) if instructor else None,
                "full_name": instructor.get('personal_info', {}).get('full_name', 'N/A') if instructor else 'N/A',
                "email": instructor.get('contact', {}).get('email', 'N/A') if instructor else 'N/A'
            },
            "grading_schema": offered_course.get('grading_schema', {}),
            "created_at": offered_course.get('created_at', datetime.now()).isoformat() if hasattr(offered_course.get('created_at', None), 'isoformat') else str(offered_course.get('created_at', '')),
            "updated_at": offered_course.get('updated_at', datetime.now()).isoformat() if hasattr(offered_course.get('updated_at', None), 'isoformat') else str(offered_course.get('updated_at', ''))
        }
        
        return jsonify({
            "status": "success",
            "course": course_data
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy chi tiết khóa học: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API quản lý sinh viên
@instructor_bp.route('/manage-student', methods=['POST'])
@instructor_required
def manage_student():
    logger.info("=== TÍNH NĂNG QUẢN LÝ SINH VIÊN ĐÃ BỊ VÔ HIỆU HÓA ===")
    
    return jsonify({
        "status": "error",
        "message": "Tính năng quản lý sinh viên đã bị vô hiệu hóa theo yêu cầu"
    }), 403
        
       

# API lấy danh sách khóa học có sẵn
@instructor_bp.route('/available-courses', methods=['GET'])
@instructor_required
def get_available_courses():
    logger.info("=== LẤY DANH SÁCH KHÓA HỌC CÓ SẴN ===")
    
    try:
        # Lấy danh sách khóa học từ collection courses
        courses = courses_collection.find({})
        
        courses_data = []
        for course in courses:
            course_data = {
                "_id": str(course['_id']),
                "title": course.get('title', 'N/A'),
                "code": course.get('code', 'N/A'),
                "credits": course.get('credits', 0),
                "description": course.get('description', 'N/A')
            }
            courses_data.append(course_data)
        
        return jsonify({
            "status": "success",
            "courses": courses_data
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy danh sách khóa học có sẵn: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy danh sách tất cả sinh viên
@instructor_bp.route('/all-students', methods=['GET'])
@instructor_required
def get_all_students():
    logger.info("=== TÍNH NĂNG LẤY DANH SÁCH TẤT CẢ SINH VIÊN ĐÃ BỊ VÔ HIỆU HÓA ===")
    
    return jsonify({
        "status": "error",
        "message": "Tính năng quản lý sinh viên đã bị vô hiệu hóa theo yêu cầu"
    }), 403
        
       

# API lấy điểm số của khóa học
@instructor_bp.route('/course/<offered_course_id>/grades', methods=['GET'])
@instructor_required
def get_course_grades(offered_course_id):
    logger.info(f"=== TÍNH NĂNG LẤY ĐIỂM SỐ CỦA KHÓA HỌC ĐÃ BỊ VÔ HIỆU HÓA ===")
    
    return jsonify({
        "status": "error",
        "message": "Tính năng quản lý sinh viên đã bị vô hiệu hóa theo yêu cầu"
    }), 403
        

# API cập nhật điểm số của khóa học
@instructor_bp.route('/course/<offered_course_id>/grades/update', methods=['PUT'])
@instructor_required
def update_course_grades(offered_course_id):
    logger.info(f"=== TÍNH NĂNG CẬP NHẬT ĐIỂM SỐ CỦA KHÓA HỌC ĐÃ BỊ VÔ HIỆU HÓA ===")
    
    # Uncomment the code below and remove the return statement to enable this feature
    return jsonify({
        "status": "error",
        "message": "Tính năng quản lý sinh viên đã bị vô hiệu hóa theo yêu cầu"
    }), 403
    
    # The code below is currently disabled
   

# API cập nhật hàng loạt điểm số
@instructor_bp.route('/course/<offered_course_id>/grades/batch-update', methods=['POST'])
@instructor_required
def batch_update_grades(offered_course_id):
    logger.info(f"=== TÍNH NĂNG CẬP NHẬT HÀNG LOẠT ĐIỂM SỐ ĐÃ BỊ VÔ HIỆU HÓA ===")
    
    # Uncomment the code below and remove the return statement to enable this feature
    return jsonify({
        "status": "error",
        "message": "Tính năng quản lý sinh viên đã bị vô hiệu hóa theo yêu cầu"
    }), 403
    
    # The code below is currently disabled
    

# API lấy chi tiết khóa học của giảng viên
@instructor_bp.route('/instructor-courses-detail/<instructor_id>', methods=['GET'])
@instructor_required
def get_instructor_courses_detail(instructor_id):
    logger.info(f"=== LẤY CHI TIẾT KHÓA HỌC CỦA GIẢNG VIÊN: {instructor_id} ===")
    
    try:
        # Chuyển đổi ID thành ObjectId
        try:
            instructor_obj_id = ObjectId(instructor_id)
        except Exception as e:
            logger.warning(f"ID giảng viên không hợp lệ: {instructor_id}")
            return jsonify({"status": "error", "message": "ID giảng viên không hợp lệ"}), 400
        
        # Lấy thông tin giảng viên
        instructor = instructors_collection.find_one({'_id': instructor_obj_id})
        if not instructor:
            logger.warning(f"Không tìm thấy giảng viên với ID: {instructor_id}")
            return jsonify({"status": "error", "message": "Không tìm thấy giảng viên"}), 404
        
        # Lấy danh sách khóa học của giảng viên
        offered_courses = offered_courses_collection.find({'instructor_id': instructor_obj_id})
        
        courses_data = []
        for offered_course in offered_courses:
            # Lấy thông tin chi tiết khóa học
            course_info = None
            if 'course_id' in offered_course:
                course_id = offered_course['course_id']
                if isinstance(course_id, str):
                    try:
                        course_id = ObjectId(course_id)
                    except:
                        pass
                course_info = courses_collection.find_one({'_id': course_id})
            
            # Tạo dữ liệu khóa học
            course_name = offered_course.get('course_name', 'N/A')
            course_code = offered_course.get('course_code', 'N/A')
            
            if course_info:
                course_name = course_info.get('title') or course_info.get('name') or course_name
                course_code = course_info.get('code') or course_info.get('subject_code') or course_code
            
            course_data = {
                "_id": str(offered_course['_id']),
                "course_id": str(offered_course.get('course_id')) if offered_course.get('course_id') else None,
                "course_name": course_name,
                "course_code": course_code,
                "class_code": offered_course.get('class_code', 'N/A'),
                "semester": offered_course.get('semester', 'N/A'),
                "academic_year": offered_course.get('academic_year', 'N/A'),
                "schedule": offered_course.get('schedule', []),
                "location": offered_course.get('location', 'N/A'),
                "max_enrollment": offered_course.get('max_enrollment', 0),
                "status": offered_course.get('status', 'active'),
                "students_count": len(offered_course.get('students', [])),
                "created_at": offered_course.get('created_at', datetime.now()).isoformat() if hasattr(offered_course.get('created_at', None), 'isoformat') else str(offered_course.get('created_at', '')),
                "updated_at": offered_course.get('updated_at', datetime.now()).isoformat() if hasattr(offered_course.get('updated_at', None), 'isoformat') else str(offered_course.get('updated_at', ''))
            }
            
            courses_data.append(course_data)
        
        return jsonify({
            "status": "success",
            "instructor": {
                "_id": str(instructor['_id']),
                "full_name": instructor.get('personal_info', {}).get('full_name', 'N/A'),
                "instructor_id": instructor.get('instructor_id', 'N/A'),
                "email": instructor.get('contact', {}).get('email', 'N/A'),
                "degree": instructor.get('academic_info', {}).get('degree', 'N/A'),
                "specialization": instructor.get('academic_info', {}).get('specialization', 'N/A')
            },
            "courses": courses_data
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy chi tiết khóa học của giảng viên: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy danh sách tất cả giảng viên
@instructor_bp.route('/all-instructors', methods=['GET'])
@instructor_required
def get_all_instructors():
    logger.info("=== LẤY DANH SÁCH TẤT CẢ GIẢNG VIÊN ===")
    
    try:
        # Lấy danh sách giảng viên từ collection instructors
        instructors = instructors_collection.find({})
        
        instructors_data = []
        for instructor in instructors:
            instructor_data = {
                "_id": str(instructor['_id']),
                "instructor_id": instructor.get('instructor_id', 'N/A'),
                "full_name": instructor.get('personal_info', {}).get('full_name', 'N/A'),
                "email": instructor.get('contact', {}).get('email', 'N/A'),
                "degree": instructor.get('academic_info', {}).get('degree', 'N/A'),
                "specialization": instructor.get('academic_info', {}).get('specialization', 'N/A')
            }
            instructors_data.append(instructor_data)
        
        return jsonify({
            "status": "success",
            "instructors": instructors_data
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy danh sách tất cả giảng viên: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy danh sách tất cả khóa học
@instructor_bp.route('/all-courses', methods=['GET'])
@instructor_required
def get_all_courses():
    logger.info("=== LẤY DANH SÁCH TẤT CẢ KHÓA HỌC ===")
    
    try:
        # Lấy danh sách khóa học từ collection courses
        courses = courses_collection.find({})
        
        courses_data = []
        for course in courses:
            course_data = {
                "_id": str(course['_id']),
                "title": course.get('title', 'N/A'),
                "code": course.get('code', 'N/A'),
                "credits": course.get('credits', 0),
                "description": course.get('description', 'N/A')
            }
            courses_data.append(course_data)
        
        return jsonify({
            "status": "success",
            "courses": courses_data
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy danh sách tất cả khóa học: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy danh sách tất cả khóa học đã mở
@instructor_bp.route('/all-offered-courses', methods=['GET'])
@instructor_required
def get_all_offered_courses():
    logger.info("=== LẤY DANH SÁCH TẤT CẢ KHÓA HỌC ĐÃ MỞ ===")
    
    try:
        # Lấy danh sách khóa học từ collection offered_courses
        offered_courses = offered_courses_collection.find({})
        
        courses_data = []
        for offered_course in offered_courses:
            # Lấy thông tin chi tiết khóa học
            course_info = None
            if 'course_id' in offered_course:
                course_id = offered_course['course_id']
                if isinstance(course_id, str):
                    try:
                        course_id = ObjectId(course_id)
                    except:
                        pass
                course_info = courses_collection.find_one({'_id': course_id})
            
            # Lấy thông tin giảng viên
            instructor = None
            if 'instructor_id' in offered_course:
                instructor_id = offered_course['instructor_id']
                if isinstance(instructor_id, str):
                    try:
                        instructor_id = ObjectId(instructor_id)
                    except:
                        pass
                instructor = instructors_collection.find_one({'_id': instructor_id})
            
            # Tạo dữ liệu khóa học
            course_name = offered_course.get('course_name', 'N/A')
            course_code = offered_course.get('course_code', 'N/A')
            
            if course_info:
                course_name = course_info.get('title') or course_info.get('name') or course_name
                course_code = course_info.get('code') or course_info.get('subject_code') or course_code
            
            course_data = {
                "_id": str(offered_course['_id']),
                "course_id": str(offered_course.get('course_id')) if offered_course.get('course_id') else None,
                "instructor_id": str(offered_course.get('instructor_id')) if offered_course.get('instructor_id') else None,
                "course_name": course_name,
                "course_code": course_code,
                "class_code": offered_course.get('class_code', 'N/A'),
                "semester": offered_course.get('semester', 'N/A'),
                "academic_year": offered_course.get('academic_year', 'N/A'),
                "instructor_name": instructor.get('personal_info', {}).get('full_name', 'N/A') if instructor else 'N/A',
                "students_count": len(offered_course.get('students', [])),
                "max_enrollment": offered_course.get('max_enrollment', 0),
                "status": offered_course.get('status', 'active')
            }
            
            courses_data.append(course_data)
        
        return jsonify({
            "status": "success",
            "courses": courses_data
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy danh sách tất cả khóa học đã mở: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API tìm kiếm khóa học
@instructor_bp.route('/search-courses', methods=['GET'])
@instructor_required
def search_instructor_courses():
    logger.info("=== TÌM KIẾM KHÓA HỌC GIẢNG VIÊN ===")
    
    # Lấy các tham số tìm kiếm
    keyword = request.args.get('keyword', '')
    instructor_id = request.args.get('instructor_id')
    semester = request.args.get('semester')
    course_code = request.args.get('course_code')
    
    # Nếu không có instructor_id, lấy từ session
    if not instructor_id:
        instructor_id = session.get('instructor_id')
        logger.info(f"Sử dụng instructor_id từ session: {instructor_id}")
    
    # Nếu vẫn không có, sử dụng ID cố định
    if not instructor_id:
        instructor_id = "60d5ec9af682fbd12a8952d1"  # ID cố định của giảng viên mẫu
        logger.info(f"Sử dụng instructor_id mặc định: {instructor_id}")
    
    try:
        # Chuyển đổi instructor_id thành ObjectId
        try:
            instructor_obj_id = ObjectId(instructor_id)
        except Exception as e:
            logger.warning(f"Không thể chuyển đổi instructor_id thành ObjectId: {str(e)}")
            return jsonify({"status": "error", "message": "ID giảng viên không hợp lệ"}), 400
        
        # Xây dựng query
        query = {}
        
        # Thêm điều kiện instructor_id
        query['instructor_id'] = instructor_obj_id
        
        # Thêm điều kiện semester nếu có
        if semester:
            query['semester'] = semester
        
        # Thêm điều kiện course_code nếu có
        if course_code:
            query['course_code'] = {'$regex': course_code, '$options': 'i'}
        
        # Thêm điều kiện tìm kiếm theo keyword
        if keyword:
            keyword_query = {
                '$or': [
                    {'course_name': {'$regex': keyword, '$options': 'i'}},
                    {'course_code': {'$regex': keyword, '$options': 'i'}},
                    {'class_code': {'$regex': keyword, '$options': 'i'}}
                ]
            }
            # Kết hợp với query hiện tại
            query = {'$and': [query, keyword_query]}
        
        # Thực hiện truy vấn
        offered_courses = offered_courses_collection.find(query)
        
        courses_data = []
        for offered_course in offered_courses:
            # Lấy thông tin chi tiết khóa học
            course_info = None
            if 'course_id' in offered_course:
                course_id = offered_course['course_id']
                if isinstance(course_id, str):
                    try:
                        course_id = ObjectId(course_id)
                    except:
                        pass
                course_info = courses_collection.find_one({'_id': course_id})
            
            # Tạo dữ liệu khóa học
            course_name = offered_course.get('course_name', 'N/A')
            course_code = offered_course.get('course_code', 'N/A')
            
            if course_info:
                course_name = course_info.get('title') or course_info.get('name') or course_name
                course_code = course_info.get('code') or course_info.get('subject_code') or course_code
            
            course_data = {
                "_id": str(offered_course['_id']),
                "course_id": str(offered_course.get('course_id')) if offered_course.get('course_id') else None,
                "course_name": course_name,
                "course_code": course_code,
                "class_code": offered_course.get('class_code', 'N/A'),
                "semester": offered_course.get('semester', 'N/A'),
                "academic_year": offered_course.get('academic_year', 'N/A'),
                "schedule": offered_course.get('schedule', []),
                "location": offered_course.get('location', 'N/A'),
                "status": offered_course.get('status', 'active'),
                "students_count": len(offered_course.get('students', [])),
                "max_enrollment": offered_course.get('max_enrollment', 0)
            }
            
            courses_data.append(course_data)
        
        return jsonify({
            "status": "success",
            "data": courses_data
        })
    except Exception as e:
        logger.error(f"Lỗi khi tìm kiếm khóa học: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API cập nhật điểm số của sinh viên
@instructor_bp.route('/update-student-grades', methods=['POST'])
@instructor_required
def update_student_grades_api():
    logger.info("=== TÍNH NĂNG CẬP NHẬT ĐIỂM SỐ SINH VIÊN ĐÃ BỊ VÔ HIỆU HÓA ===")
    
    return jsonify({
        "status": "error",
        "message": "Tính năng quản lý sinh viên đã bị vô hiệu hóa theo yêu cầu"
    }), 403

# API cập nhật điểm số của sinh viên (endpoint mới cho frontend)
@instructor_bp.route('/courses/<course_id>/students/<student_id>/grades', methods=['PUT'])
@instructor_required
def update_student_grades_new_api(course_id, student_id):
    logger.info(f"=== CẬP NHẬT ĐIỂM SỐ SINH VIÊN (API MỚI): Khóa học {course_id}, Sinh viên {student_id} ===")
    
    try:
        # Lấy dữ liệu từ request
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "Dữ liệu không hợp lệ"}), 400
        
        grades = data.get('grades')
        if not grades:
            return jsonify({"status": "error", "message": "Thiếu thông tin điểm số"}), 400
            
        # Đảm bảo grades có đầy đủ các trường cần thiết
        for field, default_value in DEFAULT_GRADES_SCHEMA.items():
            if field not in grades:
                grades[field] = default_value
        
        # Chuyển đổi ID thành ObjectId
        try:
            course_obj_id = ObjectId(course_id)
            student_obj_id = ObjectId(student_id)
        except Exception as e:
            logger.warning(f"ID không hợp lệ: {e}")
            return jsonify({"status": "error", "message": "ID không hợp lệ"}), 400
        
        # Lấy thông tin khóa học
        offered_course = offered_courses_collection.find_one({'_id': course_obj_id})
        if not offered_course:
            logger.warning(f"Không tìm thấy khóa học với ID: {course_id}")
            return jsonify({"status": "error", "message": "Không tìm thấy khóa học"}), 404
        
        # Kiểm tra xem sinh viên có trong danh sách không
        student_found = False
        students = offered_course.get('students', [])
        
        for i, student in enumerate(students):
            if isinstance(student.get('student_id'), ObjectId) and student.get('student_id') == student_obj_id:
                student_found = True
                # Cập nhật điểm số
                students[i]['grades'] = grades
                break
            elif isinstance(student.get('student_id'), str) and student.get('student_id') == student_id:
                student_found = True
                # Cập nhật điểm số
                students[i]['grades'] = grades
                break
        
        if not student_found:
            logger.warning(f"Không tìm thấy sinh viên {student_id} trong khóa học {course_id}")
            return jsonify({"status": "error", "message": "Không tìm thấy sinh viên trong khóa học"}), 404
        
        # Cập nhật vào cơ sở dữ liệu
        result = offered_courses_collection.update_one(
            {'_id': course_obj_id},
            {'$set': {'students': students, 'updated_at': datetime.now()}}
        )
        
        if result.modified_count == 0:
            logger.warning("Không có thay đổi nào được cập nhật")
            return jsonify({
                "status": "warning", 
                "message": "Không có thay đổi nào được cập nhật"
            }), 200
        
        logger.info(f"Đã cập nhật điểm thành công cho sinh viên {student_id}")
        
        return jsonify({
            "status": "success", 
            "message": "Cập nhật điểm số thành công"
        })
    except Exception as e:
        logger.error(f"Lỗi khi cập nhật điểm: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500
    
    # Kiểm tra dữ liệu đầu vào
    if not offered_course_id or not student_id:
        return jsonify({"status": "error", "message": "Vui lòng cung cấp đầy đủ thông tin"}), 400
    
    try:
        # Kiểm tra xem khóa học có thuộc về giáo viên này không
        offered_course = offered_courses_collection.find_one({
            '_id': ObjectId(offered_course_id),
            'instructor_id': ObjectId(instructor_id)
        })
        
        if not offered_course:
            return jsonify({"status": "error", "message": "Không tìm thấy khóa học hoặc bạn không có quyền truy cập"}), 404
        
        # Cập nhật điểm số
        students = offered_course.get('students', [])
        student_found = False
        
        for i, student in enumerate(students):
            if str(student.get('student_id')) == student_id:
                student_found = True
                students[i]['grades'] = grades
                break
        
        if not student_found:
            return jsonify({"status": "error", "message": "Không tìm thấy sinh viên trong khóa học"}), 404
        
        # Cập nhật vào cơ sở dữ liệu
        result = offered_courses_collection.update_one(
            {'_id': ObjectId(offered_course_id)},
            {'$set': {'students': students}}
        )
        
        if result.modified_count == 0:
            return jsonify({"status": "warning", "message": "Không có thay đổi nào được cập nhật"}), 200
        
        return jsonify({"status": "success", "message": "Cập nhật điểm số thành công"})
    except Exception as e:
        logger.error(f"Lỗi khi cập nhật điểm số: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy danh sách môn học trực tiếp
@instructor_bp.route('/lay-mon-hoc-truc-tiep', methods=['GET'])
@instructor_required
def get_courses_direct_from_mongodb():
    """
    API này truy vấn trực tiếp vào collection offered_courses để lấy danh sách các môn học.
    Truy cập: /api/instructor/lay-mon-hoc-truc-tiep
    """
    logger.info("=== TRUY VẤN TRỰC TIẾP VÀO COLLECTION OFFERED_COURSES ===")
    
    try:
        # Kiểm tra kết nối database
        if mongo is None:
            logger.warning("CẢNH BÁO: Không có kết nối đến MongoDB")
            return jsonify({"status": "error", "message": "Không thể kết nối đến cơ sở dữ liệu"}), 500
        
        # Kiểm tra collection
        if offered_courses_collection is None:
            logger.warning("CẢNH BÁO: Collection offered_courses chưa được khởi tạo")
            return jsonify({"status": "error", "message": "Collection offered_courses chưa được khởi tạo"}), 500
        
        # Lấy danh sách môn học
        offered_courses = list(offered_courses_collection.find())
        
        # Chuyển đổi ObjectId thành string
        for course in offered_courses:
            course['_id'] = str(course['_id'])
            if 'instructor_id' in course and isinstance(course['instructor_id'], ObjectId):
                course['instructor_id'] = str(course['instructor_id'])
            if 'course_id' in course and isinstance(course['course_id'], ObjectId):
                course['course_id'] = str(course['course_id'])
            
            # Xử lý danh sách sinh viên
            if 'students' in course:
                for student in course['students']:
                    if 'student_id' in student and isinstance(student['student_id'], ObjectId):
                        student['student_id'] = str(student['student_id'])
        
        return jsonify({
            "status": "success",
            "message": "Lấy danh sách môn học thành công",
            "data": offered_courses
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy danh sách môn học trực tiếp: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy danh sách môn học
@instructor_bp.route('/danh-sach-mon-hoc', methods=['GET'])
@instructor_required
def get_courses_list():
    """
    API này lấy danh sách các môn học với thông tin cơ bản.
    Truy cập: /api/instructor/danh-sach-mon-hoc
    """
    logger.info("=== LẤY DANH SÁCH MÔN HỌC ===")
    
    try:
        # Lấy danh sách môn học từ collection offered_courses
        offered_courses = offered_courses_collection.find()
        
        courses_data = []
        for offered_course in offered_courses:
            # Lấy thông tin chi tiết khóa học
            course_info = None
            if 'course_id' in offered_course:
                course_id = offered_course['course_id']
                if isinstance(course_id, str):
                    try:
                        course_id = ObjectId(course_id)
                    except:
                        pass
                course_info = courses_collection.find_one({'_id': course_id})
            
            # Lấy thông tin giảng viên
            instructor = None
            if 'instructor_id' in offered_course:
                instructor_id = offered_course['instructor_id']
                if isinstance(instructor_id, str):
                    try:
                        instructor_id = ObjectId(instructor_id)
                    except:
                        pass
                instructor = instructors_collection.find_one({'_id': instructor_id})
            
            # Tạo dữ liệu khóa học
            course_name = offered_course.get('course_name', 'N/A')
            course_code = offered_course.get('course_code', 'N/A')
            
            if course_info:
                course_name = course_info.get('title') or course_info.get('name') or course_name
                course_code = course_info.get('code') or course_info.get('subject_code') or course_code
            
            course_data = {
                "_id": str(offered_course['_id']),
                "course_name": course_name,
                "course_code": course_code,
                "class_code": offered_course.get('class_code', 'N/A'),
                "semester": offered_course.get('semester', 'N/A'),
                "academic_year": offered_course.get('academic_year', 'N/A'),
                "instructor_name": instructor.get('personal_info', {}).get('full_name', 'N/A') if instructor else 'N/A',
                "students_count": len(offered_course.get('students', [])),
                "max_enrollment": offered_course.get('max_enrollment', 0)
            }
            
            courses_data.append(course_data)
        
        return jsonify({
            "status": "success",
            "message": "Lấy danh sách môn học thành công",
            "data": courses_data
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy danh sách môn học: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy chi tiết môn học
@instructor_bp.route('/chi-tiet-mon-hoc/<offered_course_id>', methods=['GET'])
@instructor_required
def get_course_detail_api(offered_course_id):
    """
    API này lấy chi tiết của một môn học.
    Truy cập: /api/instructor/chi-tiet-mon-hoc/<offered_course_id>
    """
    logger.info(f"=== LẤY CHI TIẾT MÔN HỌC: {offered_course_id} ===")
    
    try:
        # Chuyển đổi ID thành ObjectId
        try:
            course_obj_id = ObjectId(offered_course_id)
        except Exception as e:
            logger.warning(f"ID khóa học không hợp lệ: {offered_course_id}")
            return jsonify({"status": "error", "message": "ID khóa học không hợp lệ"}), 400
        
        # Lấy thông tin khóa học
        offered_course = offered_courses_collection.find_one({'_id': course_obj_id})
        if not offered_course:
            logger.warning(f"Không tìm thấy khóa học với ID: {offered_course_id}")
            return jsonify({"status": "error", "message": "Không tìm thấy khóa học"}), 404
        
        # Lấy thông tin chi tiết khóa học
        course_info = None
        if 'course_id' in offered_course:
            course_id = offered_course['course_id']
            if isinstance(course_id, str):
                try:
                    course_id = ObjectId(course_id)
                except:
                    pass
            course_info = courses_collection.find_one({'_id': course_id})
        
        # Lấy thông tin giảng viên
        instructor = None
        if 'instructor_id' in offered_course:
            instructor_id = offered_course['instructor_id']
            if isinstance(instructor_id, str):
                try:
                    instructor_id = ObjectId(instructor_id)
                except:
                    pass
            instructor = instructors_collection.find_one({'_id': instructor_id})
        
        # Xử lý dữ liệu sinh viên
        students_data = []
        if 'students' in offered_course and isinstance(offered_course['students'], list):
            for student_info in offered_course['students']:
                try:
                    student_id = student_info.get('student_id')
                    if isinstance(student_id, str):
                        try:
                            student_id = ObjectId(student_id)
                        except:
                            continue
                    
                    # Lấy thông tin sinh viên
                    student = students_collection.find_one({'_id': student_id})
                    if student:
                        student_data = {
                            "student_id": str(student_id),
                            "mssv": student.get('mssv', 'N/A'),
                            "full_name": student.get('personal_info', {}).get('full_name', 'N/A'),
                            "email": student.get('personal_info', {}).get('email', {}).get('school', 'N/A'),
                            "class": student.get('personal_info', {}).get('class', 'N/A'),
                            "grades": student_info.get('grades', {})
                        }
                        students_data.append(student_data)
                except Exception as e:
                    logger.error(f"Lỗi khi xử lý thông tin sinh viên: {str(e)}")
        
        # Tạo dữ liệu trả về
        course_name = offered_course.get('course_name', 'N/A')
        course_code = offered_course.get('course_code', 'N/A')
        
        if course_info:
            course_name = course_info.get('title') or course_info.get('name') or course_name
            course_code = course_info.get('code') or course_info.get('subject_code') or course_code
        
        course_data = {
            "_id": str(offered_course['_id']),
            "course_id": str(offered_course.get('course_id')) if offered_course.get('course_id') else None,
            "instructor_id": str(offered_course.get('instructor_id')) if offered_course.get('instructor_id') else None,
            "course_name": course_name,
            "course_code": course_code,
            "class_code": offered_course.get('class_code', 'N/A'),
            "semester": offered_course.get('semester', 'N/A'),
            "academic_year": offered_course.get('academic_year', 'N/A'),
            "schedule": offered_course.get('schedule', []),
            "location": offered_course.get('location', 'N/A'),
            "max_enrollment": offered_course.get('max_enrollment', 0),
            "status": offered_course.get('status', 'active'),
            "students": students_data,
            "instructor": {
                "_id": str(instructor['_id']) if instructor else None,
                "full_name": instructor.get('personal_info', {}).get('full_name', 'N/A') if instructor else 'N/A',
                "email": instructor.get('contact', {}).get('email', 'N/A') if instructor else 'N/A'
            },
            "grading_schema": offered_course.get('grading_schema', {}),
            "created_at": offered_course.get('created_at', datetime.now()).isoformat() if hasattr(offered_course.get('created_at', None), 'isoformat') else str(offered_course.get('created_at', '')),
            "updated_at": offered_course.get('updated_at', datetime.now()).isoformat() if hasattr(offered_course.get('updated_at', None), 'isoformat') else str(offered_course.get('updated_at', ''))
        }
        
        return jsonify({
            "status": "success",
            "message": "Lấy chi tiết môn học thành công",
            "data": course_data
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy chi tiết môn học: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy danh sách môn học của giảng viên
@instructor_bp.route('/mon-hoc-giang-vien/<instructor_id>', methods=['GET'])
@instructor_required
def get_instructor_courses_api(instructor_id):
    """
    API này lấy danh sách các môn học của một giảng viên.
    Truy cập: /api/instructor/mon-hoc-giang-vien/<instructor_id>
    """
    logger.info(f"=== LẤY DANH SÁCH MÔN HỌC CỦA GIẢNG VIÊN: {instructor_id} ===")
    
    try:
        # Chuyển đổi ID thành ObjectId
        try:
            instructor_obj_id = ObjectId(instructor_id)
        except Exception as e:
            logger.warning(f"ID giảng viên không hợp lệ: {instructor_id}")
            return jsonify({"status": "error", "message": "ID giảng viên không hợp lệ"}), 400
        
        # Lấy thông tin giảng viên
        instructor = instructors_collection.find_one({'_id': instructor_obj_id})
        if not instructor:
            logger.warning(f"Không tìm thấy giảng viên với ID: {instructor_id}")
            return jsonify({"status": "error", "message": "Không tìm thấy giảng viên"}), 404
        
        # Lấy danh sách khóa học của giảng viên
        offered_courses = offered_courses_collection.find({'instructor_id': instructor_obj_id})
        
        courses_data = []
        for offered_course in offered_courses:
            # Lấy thông tin chi tiết khóa học
            course_info = None
            if 'course_id' in offered_course:
                course_id = offered_course['course_id']
                if isinstance(course_id, str):
                    try:
                        course_id = ObjectId(course_id)
                    except:
                        pass
                course_info = courses_collection.find_one({'_id': course_id})
            
            # Tạo dữ liệu khóa học
            course_name = offered_course.get('course_name', 'N/A')
            course_code = offered_course.get('course_code', 'N/A')
            
            if course_info:
                course_name = course_info.get('title') or course_info.get('name') or course_name
                course_code = course_info.get('code') or course_info.get('subject_code') or course_code
            
            course_data = {
                "_id": str(offered_course['_id']),
                "course_name": course_name,
                "course_code": course_code,
                "class_code": offered_course.get('class_code', 'N/A'),
                "semester": offered_course.get('semester', 'N/A'),
                "academic_year": offered_course.get('academic_year', 'N/A'),
                "students_count": len(offered_course.get('students', [])),
                "max_enrollment": offered_course.get('max_enrollment', 0)
            }
            
            courses_data.append(course_data)
        
        return jsonify({
            "status": "success",
            "message": "Lấy danh sách môn học của giảng viên thành công",
            "data": {
                "instructor": {
                    "_id": str(instructor['_id']),
                    "full_name": instructor.get('personal_info', {}).get('full_name', 'N/A'),
                    "email": instructor.get('contact', {}).get('email', 'N/A')
                },
                "courses": courses_data
            }
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy danh sách môn học của giảng viên: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy danh sách môn học của giảng viên trực tiếp
@instructor_bp.route('/mon-hoc-giang-vien-truc-tiep/<instructor_id>', methods=['GET'])
@instructor_required
def get_instructor_courses_direct(instructor_id):
    """
    API này truy vấn trực tiếp vào collection offered_courses để lấy danh sách các môn học của một giảng viên cụ thể.
    Truy cập: /api/instructor/mon-hoc-giang-vien-truc-tiep/<instructor_id>
    """
    logger.info(f"=== TRUY VẤN TRỰC TIẾP MÔN HỌC CỦA GIẢNG VIÊN: {instructor_id} ===")
    
    try:
        # Kiểm tra kết nối database
        if mongo is None:
            logger.warning("CẢNH BÁO: Không có kết nối đến MongoDB")
            return jsonify({"status": "error", "message": "Không thể kết nối đến cơ sở dữ liệu"}), 500
        
        # Kiểm tra collection
        if offered_courses_collection is None:
            logger.warning("CẢNH BÁO: Collection offered_courses chưa được khởi tạo")
            return jsonify({"status": "error", "message": "Lỗi khởi tạo collection"}), 500
        
        # Chuyển đổi instructor_id thành ObjectId nếu có thể
        try:
            instructor_obj_id = ObjectId(instructor_id)
        except Exception as e:
            logger.warning(f"Không thể chuyển đổi instructor_id thành ObjectId: {str(e)}")
            return jsonify({"status": "error", "message": "ID giảng viên không hợp lệ"}), 400
        
        # Lấy danh sách môn học của giảng viên
        offered_courses = list(offered_courses_collection.find({'instructor_id': instructor_obj_id}))
        
        # Chuyển đổi ObjectId thành string
        for course in offered_courses:
            course['_id'] = str(course['_id'])
            if 'instructor_id' in course and isinstance(course['instructor_id'], ObjectId):
                course['instructor_id'] = str(course['instructor_id'])
            if 'course_id' in course and isinstance(course['course_id'], ObjectId):
                course['course_id'] = str(course['course_id'])
            
            # Xử lý danh sách sinh viên
            if 'students' in course:
                for student in course['students']:
                    if 'student_id' in student and isinstance(student['student_id'], ObjectId):
                        student['student_id'] = str(student['student_id'])
        
        return jsonify({
            "status": "success",
            "message": "Lấy danh sách môn học của giảng viên thành công",
            "data": offered_courses
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy danh sách môn học của giảng viên: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy danh sách khóa học của giảng viên
@instructor_bp.route('/instructor-courses/<instructor_id>', methods=['GET'])
@instructor_required
def get_instructor_courses_by_id(instructor_id):
    logger.info(f"Getting courses for instructor ID: {instructor_id}")
    try:
        # Kiểm tra xem instructor_id có hợp lệ không
        try:
            instructor_obj_id = ObjectId(instructor_id)
            logger.debug(f"Converted instructor_id to ObjectId: {instructor_obj_id}")
        except Exception as e:
            logger.warning(f"Error converting instructor_id to ObjectId: {str(e)}")
            instructor_obj_id = instructor_id
        
        # Kiểm tra xem instructor có tồn tại không
        instructor = instructors_collection.find_one({"_id": instructor_obj_id})
        if instructor:
            logger.info(f"Found instructor in database: {instructor.get('personal_info', {}).get('full_name', 'Unknown')}")
        else:
            logger.warning(f"Instructor not found with ID: {instructor_id}")
        
        # Lấy danh sách các khóa học đã mở của giáo viên
        logger.debug(f"Querying offered_courses with instructor_id as ObjectId: {instructor_obj_id}")
        offered_courses = offered_courses_collection.find({"instructor_id": instructor_obj_id})
        
        # Chuyển đổi kết quả thành danh sách
        courses_list = []
        for course in offered_courses:
            # Lấy thông tin chi tiết khóa học
            course_info = None
            if 'course_id' in course:
                course_id = course['course_id']
                if isinstance(course_id, str):
                    try:
                        course_id = ObjectId(course_id)
                    except:
                        pass
                course_info = courses_collection.find_one({'_id': course_id})
            
            # Tạo dữ liệu khóa học
            course_name = course.get('course_name', 'N/A')
            course_code = course.get('course_code', 'N/A')
            
            if course_info:
                course_name = course_info.get('title') or course_info.get('name') or course_name
                course_code = course_info.get('code') or course_info.get('subject_code') or course_code
            
            course_data = {
                "_id": str(course['_id']),
                "course_id": str(course.get('course_id')) if course.get('course_id') else None,
                "course_name": course_name,
                "course_code": course_code,
                "class_code": course.get('class_code', 'N/A'),
                "semester": course.get('semester', 'N/A'),
                "academic_year": course.get('academic_year', 'N/A'),
                "schedule": course.get('schedule', []),
                "location": course.get('location', 'N/A'),
                "status": course.get('status', 'active'),
                "students_count": len(course.get('students', [])),
                "max_enrollment": course.get('max_enrollment', 0)
            }
            
            courses_list.append(course_data)
        
        # Tạo thông tin giảng viên
        instructor_data = {
            "_id": str(instructor['_id']) if instructor else None,
            "full_name": instructor.get('personal_info', {}).get('full_name', 'N/A') if instructor else 'N/A',
            "instructor_id": instructor.get('instructor_id', 'N/A') if instructor else 'N/A',
            "email": instructor.get('contact', {}).get('email', 'N/A') if instructor else 'N/A',
            "degree": instructor.get('academic_info', {}).get('degree', 'N/A') if instructor else 'N/A',
            "specialization": instructor.get('academic_info', {}).get('specialization', 'N/A') if instructor else 'N/A'
        }
        
        return jsonify({
            "status": "success",
            "instructor": instructor_data,
            "courses": courses_list
        })
    except Exception as e:
        logger.error(f"Error getting instructor courses: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy thông tin sinh viên
@instructor_bp.route('/students/<student_id>', methods=['GET'])
@instructor_required
def get_student_by_id(student_id):
    logger.info(f"=== TÍNH NĂNG LẤY THÔNG TIN SINH VIÊN ĐÃ BỊ VÔ HIỆU HÓA ===")
    
    return jsonify({
        "status": "error",
        "message": "Tính năng quản lý sinh viên đã bị vô hiệu hóa theo yêu cầu"
    }), 403
 

# API xóa sinh viên khỏi khóa học
@instructor_bp.route('/courses/<course_id>/students/<student_id>', methods=['DELETE'])
@instructor_required
def remove_student_from_course(course_id, student_id):
    logger.info(f"=== TÍNH NĂNG XÓA SINH VIÊN KHỎI KHÓA HỌC ĐÃ BỊ VÔ HIỆU HÓA ===")
    
    return jsonify({
        "status": "error",
        "message": "Tính năng quản lý sinh viên đã bị vô hiệu hóa theo yêu cầu"
    }), 403
        
        # Lấy thông tin khóa học
      

# API lấy thông tin điểm danh của khóa học
@instructor_bp.route('/courses/<offered_course_id>/attendance', methods=['GET'])
@instructor_required
def get_course_attendance(offered_course_id):
    logger.info(f"=== LẤY THÔNG TIN ĐIỂM DANH CỦA KHÓA HỌC: {offered_course_id} ===")
    
    try:
        # Chuyển đổi offered_course_id thành ObjectId
        try:
            course_obj_id = ObjectId(offered_course_id)
        except Exception as e:
            logger.warning(f"ID khóa học không hợp lệ: {str(e)}")
            return jsonify({"status": "error", "message": "ID khóa học không hợp lệ"}), 400
        
        # Lấy thông tin khóa học
        offered_course = offered_courses_collection.find_one({'_id': course_obj_id})
        if not offered_course:
            logger.warning(f"Không tìm thấy khóa học với ID: {offered_course_id}")
            return jsonify({"status": "error", "message": "Không tìm thấy khóa học"}), 404
        
        # Lấy thông tin điểm danh
        attendance_records = list(mongo.db.attendance.find({"offered_course_id": course_obj_id}))
        
        # Chuyển đổi ObjectId thành string
        for record in attendance_records:
            record['_id'] = str(record['_id'])
            if 'offered_course_id' in record and isinstance(record['offered_course_id'], ObjectId):
                record['offered_course_id'] = str(record['offered_course_id'])
            
            # Xử lý danh sách sinh viên trong điểm danh
            if 'attendance' in record and isinstance(record['attendance'], list):
                for student in record['attendance']:
                    if 'student_id' in student and isinstance(student['student_id'], ObjectId):
                        student['student_id'] = str(student['student_id'])
        
        return jsonify({
            "status": "success",
            "offered_course": {
                "_id": str(offered_course['_id']),
                "course_name": offered_course.get('course_name', 'N/A'),
                "course_code": offered_course.get('course_code', 'N/A'),
                "class_code": offered_course.get('class_code', 'N/A')
            },
            "attendance_records": attendance_records
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy thông tin điểm danh: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy thông tin điểm danh theo ngày
@instructor_bp.route('/courses/<offered_course_id>/attendance/date', methods=['GET'])
@instructor_required
def get_attendance_by_date(offered_course_id):
    logger.info(f"=== LẤY THÔNG TIN ĐIỂM DANH THEO NGÀY CỦA KHÓA HỌC: {offered_course_id} ===")
    
    try:
        # Lấy ngày từ query parameter
        date_str = request.args.get('date')
        if not date_str:
            logger.warning("Không có thông tin ngày")
            return jsonify({"status": "error", "message": "Không có thông tin ngày"}), 400
        
        # Chuyển đổi offered_course_id thành ObjectId
        try:
            course_obj_id = ObjectId(offered_course_id)
        except Exception as e:
            logger.warning(f"ID khóa học không hợp lệ: {str(e)}")
            return jsonify({"status": "error", "message": "ID khóa học không hợp lệ"}), 400
        
        # Chuyển đổi ngày thành datetime
        try:
            attendance_date = datetime.strptime(date_str, "%Y-%m-%d")
        except Exception as e:
            logger.warning(f"Định dạng ngày không hợp lệ: {str(e)}")
            return jsonify({"status": "error", "message": "Định dạng ngày không hợp lệ"}), 400
        
        # Lấy thông tin điểm danh
        attendance_record = mongo.db.attendance.find_one({
            "offered_course_id": course_obj_id,
            "date": attendance_date
        })
        
        if not attendance_record:
            logger.warning(f"Không tìm thấy thông tin điểm danh cho ngày {date_str}")
            return jsonify({"status": "error", "message": "Không tìm thấy thông tin điểm danh"}), 404
        
        # Chuyển đổi ObjectId thành string
        attendance_record['_id'] = str(attendance_record['_id'])
        if 'offered_course_id' in attendance_record and isinstance(attendance_record['offered_course_id'], ObjectId):
            attendance_record['offered_course_id'] = str(attendance_record['offered_course_id'])
        
        # Xử lý danh sách sinh viên trong điểm danh
        if 'attendance' in attendance_record and isinstance(attendance_record['attendance'], list):
            for student in attendance_record['attendance']:
                if 'student_id' in student and isinstance(student['student_id'], ObjectId):
                    student['student_id'] = str(student['student_id'])
        
        return jsonify({
            "status": "success",
            "attendance_record": attendance_record
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy thông tin điểm danh theo ngày: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API tạo điểm danh mới
@instructor_bp.route('/courses/<offered_course_id>/attendance', methods=['POST'])
@instructor_required
def create_course_attendance(offered_course_id):
    logger.info(f"=== TẠO ĐIỂM DANH MỚI CHO KHÓA HỌC: {offered_course_id} ===")
    
    try:
        # Lấy dữ liệu từ request
        data = request.get_json()
        if not data:
            logger.warning("Không có dữ liệu")
            return jsonify({"status": "error", "message": "Không có dữ liệu"}), 400
        
        # Lấy ngày từ dữ liệu
        date_str = data.get('date')
        if not date_str:
            logger.warning("Không có thông tin ngày")
            return jsonify({"status": "error", "message": "Không có thông tin ngày"}), 400
        
        # Chuyển đổi offered_course_id thành ObjectId
        try:
            course_obj_id = ObjectId(offered_course_id)
        except Exception as e:
            logger.warning(f"ID khóa học không hợp lệ: {str(e)}")
            return jsonify({"status": "error", "message": "ID khóa học không hợp lệ"}), 400
        
        # Lấy thông tin khóa học
        offered_course = offered_courses_collection.find_one({'_id': course_obj_id})
        if not offered_course:
            logger.warning(f"Không tìm thấy khóa học với ID: {offered_course_id}")
            return jsonify({"status": "error", "message": "Không tìm thấy khóa học"}), 404
        
        # Chuyển đổi ngày thành datetime
        try:
            attendance_date = datetime.strptime(date_str, "%Y-%m-%d")
        except Exception as e:
            logger.warning(f"Định dạng ngày không hợp lệ: {str(e)}")
            return jsonify({"status": "error", "message": "Định dạng ngày không hợp lệ"}), 400
        
        # Kiểm tra xem đã có điểm danh cho ngày này chưa
        existing_attendance = mongo.db.attendance.find_one({
            "offered_course_id": course_obj_id,
            "date": attendance_date
        })
        
        if existing_attendance:
            logger.warning(f"Đã có điểm danh cho ngày {date_str}")
            return jsonify({"status": "error", "message": "Đã có điểm danh cho ngày này"}), 400
        
        # Tạo danh sách điểm danh cho tất cả sinh viên trong khóa học
        students = offered_course.get('students', [])
        attendance_data = []
        
        for student in students:
            student_id = student.get('student_id')
            if not student_id:
                continue
            
            if isinstance(student_id, str):
                try:
                    student_id = ObjectId(student_id)
                except:
                    continue
            
            attendance_data.append({
                "student_id": student_id,
                "student_name": student.get('full_name', 'N/A'),
                "status": "present"  # Mặc định là có mặt
            })
        
        # Tạo bản ghi điểm danh mới
        new_attendance = {
            "offered_course_id": course_obj_id,
            "date": attendance_date,
            "attendance": attendance_data,
            "created_at": datetime.now(),
            "updated_at": datetime.now()
        }
        
        # Lưu vào database
        result = mongo.db.attendance.insert_one(new_attendance)
        
        # Chuyển đổi ObjectId thành string
        new_attendance['_id'] = str(result.inserted_id)
        new_attendance['offered_course_id'] = str(new_attendance['offered_course_id'])
        
        # Xử lý danh sách sinh viên trong điểm danh
        for student in new_attendance['attendance']:
            if 'student_id' in student and isinstance(student['student_id'], ObjectId):
                student['student_id'] = str(student['student_id'])
        
        return jsonify({
            "status": "success",
            "message": "Đã tạo điểm danh thành công",
            "attendance_record": new_attendance
        })
    except Exception as e:
        logger.error(f"Lỗi khi tạo điểm danh: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API cập nhật điểm danh
@instructor_bp.route('/courses/<offered_course_id>/attendance/update', methods=['PUT'])
@instructor_required
def update_course_attendance(offered_course_id):
    logger.info(f"=== CẬP NHẬT ĐIỂM DANH CHO KHÓA HỌC: {offered_course_id} ===")
    
    try:
        # Lấy dữ liệu từ request
        data = request.get_json()
        if not data:
            logger.warning("Không có dữ liệu")
            return jsonify({"status": "error", "message": "Không có dữ liệu"}), 400
        
        # Lấy thông tin cần thiết
        attendance_id = data.get('attendance_id')
        student_id = data.get('student_id')
        status = data.get('status')
        
        if not attendance_id or not student_id or not status:
            logger.warning("Thiếu thông tin cần thiết")
            return jsonify({"status": "error", "message": "Thiếu thông tin cần thiết"}), 400
        
        # Chuyển đổi ID thành ObjectId
        try:
            attendance_obj_id = ObjectId(attendance_id)
            student_obj_id = ObjectId(student_id)
            course_obj_id = ObjectId(offered_course_id)
        except Exception as e:
            logger.warning(f"ID không hợp lệ: {str(e)}")
            return jsonify({"status": "error", "message": "ID không hợp lệ"}), 400
        
        # Cập nhật trạng thái điểm danh
        result = mongo.db.attendance.update_one(
            {
                "_id": attendance_obj_id,
                "offered_course_id": course_obj_id,
                "attendance.student_id": student_obj_id
            },
            {
                "$set": {
                    "attendance.$.status": status,
                    "updated_at": datetime.now()
                }
            }
        )
        
        if result.matched_count == 0:
            logger.warning(f"Không tìm thấy bản ghi điểm danh phù hợp")
            return jsonify({"status": "error", "message": "Không tìm thấy bản ghi điểm danh phù hợp"}), 404
        
        return jsonify({
            "status": "success",
            "message": "Đã cập nhật điểm danh thành công"
        })
    except Exception as e:
        logger.error(f"Lỗi khi cập nhật điểm danh: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API xóa điểm danh
@instructor_bp.route('/courses/<course_id>/attendance', methods=['DELETE'])
@instructor_required
def delete_course_attendance(course_id):
    logger.info(f"=== XÓA ĐIỂM DANH CỦA KHÓA HỌC: {course_id} ===")
    
    try:
        # Lấy ngày từ query parameter
        date_str = request.args.get('date')
        if not date_str:
            logger.warning("Không có thông tin ngày")
            return jsonify({"status": "error", "message": "Không có thông tin ngày"}), 400
        
        # Chuyển đổi course_id thành ObjectId
        try:
            course_obj_id = ObjectId(course_id)
        except Exception as e:
            logger.warning(f"ID khóa học không hợp lệ: {str(e)}")
            return jsonify({"status": "error", "message": "ID khóa học không hợp lệ"}), 400
        
        # Chuyển đổi ngày thành datetime
        try:
            attendance_date = datetime.strptime(date_str, "%Y-%m-%d")
        except Exception as e:
            logger.warning(f"Định dạng ngày không hợp lệ: {str(e)}")
            return jsonify({"status": "error", "message": "Định dạng ngày không hợp lệ"}), 400
        
        # Xóa bản ghi điểm danh
        result = mongo.db.attendance.delete_one({
            "offered_course_id": course_obj_id,
            "date": attendance_date
        })
        
        if result.deleted_count == 0:
            logger.warning(f"Không tìm thấy bản ghi điểm danh cho ngày {date_str}")
            return jsonify({"status": "error", "message": "Không tìm thấy bản ghi điểm danh"}), 404
        
        return jsonify({
            "status": "success",
            "message": "Đã xóa điểm danh thành công"
        })
    except Exception as e:
        logger.error(f"Lỗi khi xóa điểm danh: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API thêm sinh viên vào khóa học
@instructor_bp.route('/courses/<course_id>/students', methods=['POST'])
@instructor_required
def add_student_to_course(course_id):
    logger.info(f"=== TÍNH NĂNG THÊM SINH VIÊN VÀO KHÓA HỌC ĐÃ BỊ VÔ HIỆU HÓA ===")
    
    return jsonify({
        "status": "error",
        "message": "Tính năng quản lý sinh viên đã bị vô hiệu hóa theo yêu cầu"
    }), 403
        
        # Chuyển đổi ID thành ObjectId
     

# API tạo khóa học mới
@instructor_bp.route('/courses', methods=['POST'])
@instructor_required
def create_course():
    logger.info("=== TẠO KHÓA HỌC MỚI ===")
    
    try:
        # Lấy dữ liệu từ request
        data = request.get_json()
        if not data:
            logger.warning("Không có dữ liệu")
            return jsonify({"status": "error", "message": "Không có dữ liệu"}), 400
        
        # Lấy thông tin giảng viên
        instructor_id = session.get('instructor_id')
        if not instructor_id:
            instructor_id = data.get('instructor_id')
        
        if not instructor_id:
            logger.warning("Không có thông tin giảng viên")
            return jsonify({"status": "error", "message": "Không có thông tin giảng viên"}), 400
        
        # Chuyển đổi instructor_id thành ObjectId
        try:
            instructor_obj_id = ObjectId(instructor_id)
        except Exception as e:
            logger.warning(f"ID giảng viên không hợp lệ: {str(e)}")
            return jsonify({"status": "error", "message": "ID giảng viên không hợp lệ"}), 400
        
        # Lấy thông tin khóa học
        course_id = data.get('course_id')
        if course_id:
            try:
                course_obj_id = ObjectId(course_id)
            except Exception as e:
                logger.warning(f"ID khóa học không hợp lệ: {str(e)}")
                return jsonify({"status": "error", "message": "ID khóa học không hợp lệ"}), 400
        else:
            course_obj_id = None
        
        # Tạo khóa học mới
        new_course = {
            "instructor_id": instructor_obj_id,
            "course_id": course_obj_id,
            "course_name": data.get('course_name', 'N/A'),
            "course_code": data.get('course_code', 'N/A'),
            "class_code": data.get('class_code', 'N/A'),
            "semester": data.get('semester', 'N/A'),
            "academic_year": data.get('academic_year', 'N/A'),
            "schedule": data.get('schedule', []),
            "location": data.get('location', 'N/A'),
            "max_enrollment": data.get('max_enrollment', 0),
            "status": data.get('status', 'active'),
            "students": [],
            "created_at": datetime.now(),
            "updated_at": datetime.now()
        }
        
        # Lưu vào database
        result = offered_courses_collection.insert_one(new_course)
        
        # Chuyển đổi ObjectId thành string
        new_course['_id'] = str(result.inserted_id)
        new_course['instructor_id'] = str(new_course['instructor_id'])
        if new_course['course_id']:
            new_course['course_id'] = str(new_course['course_id'])
        
        return jsonify({
            "status": "success",
            "message": "Đã tạo khóa học thành công",
            "course": new_course
        })
    except Exception as e:
        logger.error(f"Lỗi khi tạo khóa học: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API kiểm tra
@instructor_bp.route('/test', methods=['GET'])
def test_api():
    logger.info("Test API endpoint called")
    response = jsonify({
        "status": "success",
        "message": "API is working correctly",
        "timestamp": datetime.now().isoformat()
    })
    return response

# API lấy thông tin học thuật
@instructor_bp.route('/academic_records', methods=['GET'])
@instructor_required
def get_academic_records():
    logger.info("=== LẤY THÔNG TIN HỌC THUẬT GIẢNG VIÊN ===")
    
    instructor_id = session.get('instructor_id')
    if not instructor_id:
        return jsonify({"status": "error", "message": "Không tìm thấy thông tin giảng viên"}), 401
    
    try:
        instructor = instructors_collection.find_one({"_id": ObjectId(instructor_id)})
        if not instructor:
            return jsonify({"status": "error", "message": "Không tìm thấy thông tin giảng viên"}), 404
        
        # Lấy danh sách các khóa học đã dạy
        courses_taught = []
        offered_courses = offered_courses_collection.find({"instructor_id": ObjectId(instructor_id)})
        
        for course in offered_courses:
            course_data = {
                "_id": str(course['_id']),
                "course_name": course.get('course_name', 'N/A'),
                "course_code": course.get('course_code', 'N/A'),
                "class_code": course.get('class_code', 'N/A'),
                "semester": course.get('semester', 'N/A'),
                "academic_year": course.get('academic_year', 'N/A'),
                "students_count": len(course.get('students', [])),
                "status": course.get('status', 'active')
            }
            courses_taught.append(course_data)
        
        # Tạo dữ liệu học thuật
        academic_data = {
            "instructor_id": str(instructor['_id']),
            "courses_taught": courses_taught,
            "teaching_history": {
                "total_courses": len(courses_taught),
                "semesters_taught": list(set([course.get('semester') for course in courses_taught])),
                "subjects": list(set([course.get('course_code') for course in courses_taught]))
            }
        }
        
        return jsonify({
            "status": "success",
            "data": academic_data
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy thông tin học thuật: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy thông tin đánh giá hiệu suất
@instructor_bp.route('/performance_review', methods=['GET'])
@instructor_required
def get_performance_review():
    logger.info("=== LẤY THÔNG TIN ĐÁNH GIÁ HIỆU SUẤT GIẢNG VIÊN ===")
    
    instructor_id = session.get('instructor_id')
    if not instructor_id:
        return jsonify({"status": "error", "message": "Không tìm thấy thông tin giảng viên"}), 401
    
    try:
        instructor = instructors_collection.find_one({"_id": ObjectId(instructor_id)})
        if not instructor:
            return jsonify({"status": "error", "message": "Không tìm thấy thông tin giảng viên"}), 404
        
        # Tạo dữ liệu đánh giá hiệu suất mẫu
        performance_data = {
            "instructor_id": str(instructor['_id']),
            "reviews": [
                {
                    "semester": "Học kỳ 1 - Năm học 2023-2024",
                    "overall_rating": 4.5,
                    "student_feedback": [
                        {"course_code": "SE101", "rating": 4.7, "comments": "Giảng viên nhiệt tình, dễ hiểu"},
                        {"course_code": "SE201", "rating": 4.3, "comments": "Bài giảng hay, tài liệu phong phú"}
                    ],
                    "peer_review": {
                        "rating": 4.6,
                        "strengths": ["Phương pháp giảng dạy hiệu quả", "Kiến thức chuyên môn tốt"],
                        "areas_for_improvement": ["Cần cập nhật thêm tài liệu mới"]
                    }
                }
            ],
            "achievements": [
                {"year": 2023, "title": "Giảng viên xuất sắc khoa CNTT", "description": "Được bình chọn bởi sinh viên và đồng nghiệp"},
                {"year": 2022, "title": "Hướng dẫn đội thi ACM-ICPC", "description": "Đội đạt giải khuyến khích khu vực châu Á"}
            ]
        }
        
        return jsonify({
            "status": "success",
            "data": performance_data
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy thông tin đánh giá hiệu suất: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy thông tin lịch giảng dạy
@instructor_bp.route('/calendar', methods=['GET'])
@instructor_required
def get_calendar():
    logger.info("=== LẤY THÔNG TIN LỊCH GIẢNG DẠY GIẢNG VIÊN ===")
    
    instructor_id = session.get('instructor_id')
    if not instructor_id:
        return jsonify({"status": "error", "message": "Không tìm thấy thông tin giảng viên"}), 401
    
    try:
        instructor = instructors_collection.find_one({"_id": ObjectId(instructor_id)})
        if not instructor:
            return jsonify({"status": "error", "message": "Không tìm thấy thông tin giảng viên"}), 404
        
        # Lấy danh sách các khóa học đang dạy
        current_courses = offered_courses_collection.find({
            "instructor_id": ObjectId(instructor_id),
            "status": "active"
        })
        
        # Tạo dữ liệu lịch giảng dạy
        calendar_events = []
        for course in current_courses:
            course_name = course.get('course_name', 'N/A')
            course_code = course.get('course_code', 'N/A')
            class_code = course.get('class_code', 'N/A')
            
            # Xử lý lịch học từ thông tin khóa học
            schedule = course.get('schedule', [])
            for schedule_item in schedule:
                event = {
                    "course_id": str(course['_id']),
                    "course_name": course_name,
                    "course_code": course_code,
                    "class_code": class_code,
                    "day_of_week": schedule_item.get('day_of_week', 'N/A'),
                    "start_time": schedule_item.get('start_time', 'N/A'),
                    "end_time": schedule_item.get('end_time', 'N/A'),
                    "location": schedule_item.get('location') or course.get('location', 'N/A'),
                    "type": schedule_item.get('type', 'lecture')
                }
                calendar_events.append(event)
        
        # Nếu không có dữ liệu lịch, tạo dữ liệu mẫu
        if not calendar_events:
            calendar_events = [
                {
                    "course_id": "sample_course_1",
                    "course_name": "Nhập môn lập trình",
                    "course_code": "SE101",
                    "class_code": "SE101.1",
                    "day_of_week": "Thứ 2",
                    "start_time": "07:30",
                    "end_time": "09:30",
                    "location": "E201",
                    "type": "lecture"
                },
                {
                    "course_id": "sample_course_1",
                    "course_name": "Nhập môn lập trình",
                    "course_code": "SE101",
                    "class_code": "SE101.1",
                    "day_of_week": "Thứ 4",
                    "start_time": "13:30",
                    "end_time": "15:30",
                    "location": "B11",
                    "type": "practice"
                },
                {
                    "course_id": "sample_course_2",
                    "course_name": "Kỹ thuật phần mềm",
                    "course_code": "SE201",
                    "class_code": "SE201.1",
                    "day_of_week": "Thứ 3",
                    "start_time": "09:30",
                    "end_time": "11:30",
                    "location": "E202",
                    "type": "lecture"
                }
            ]
        
        return jsonify({
            "status": "success",
            "data": calendar_events
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy thông tin lịch giảng dạy: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API lấy thông tin chương trình đào tạo
@instructor_bp.route('/curriculum', methods=['GET'])
@instructor_required
def get_curriculum():
    logger.info("=== LẤY THÔNG TIN CHƯƠNG TRÌNH ĐÀO TẠO ===")
    
    try:
        # Lấy thông tin chương trình đào tạo từ database
        curriculum_data = list(curriculum_collection.find())
        
        # Nếu không có dữ liệu, tạo dữ liệu mẫu
        if not curriculum_data:
            curriculum_data = [
                {
                    "_id": "curriculum_cs",
                    "name": "Khoa học máy tính",
                    "code": "CS",
                    "total_credits": 145,
                    "duration_years": 4,
                    "courses": [
                        {
                            "course_code": "CS101",
                            "course_name": "Nhập môn lập trình",
                            "credits": 4,
                            "semester": 1,
                            "prerequisites": []
                        },
                        {
                            "course_code": "CS201",
                            "course_name": "Cấu trúc dữ liệu và giải thuật",
                            "credits": 4,
                            "semester": 2,
                            "prerequisites": ["CS101"]
                        }
                    ]
                },
                {
                    "_id": "curriculum_se",
                    "name": "Kỹ thuật phần mềm",
                    "code": "SE",
                    "total_credits": 145,
                    "duration_years": 4,
                    "courses": [
                        {
                            "course_code": "SE101",
                            "course_name": "Nhập môn lập trình",
                            "credits": 4,
                            "semester": 1,
                            "prerequisites": []
                        },
                        {
                            "course_code": "SE201",
                            "course_name": "Kỹ thuật phần mềm",
                            "credits": 4,
                            "semester": 3,
                            "prerequisites": ["SE101"]
                        }
                    ]
                }
            ]
        
        # Chuyển đổi ObjectId thành string
        for curriculum in curriculum_data:
            if '_id' in curriculum:
                curriculum['_id'] = str(curriculum['_id'])
        
        return jsonify({
            "status": "success",
            "data": curriculum_data
        })
    except Exception as e:
        logger.error(f"Lỗi khi lấy thông tin chương trình đào tạo: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

# API xử lý OPTIONS request
@instructor_bp.route('/<path:path>', methods=['OPTIONS'])
@instructor_bp.route('/', methods=['OPTIONS'])
def options_handler(path=None):
    response = jsonify({'status': 'ok'})
    response.headers['Access-Control-Allow-Origin'] = '*'
    response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'
    response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization'
    return response

# Hàm khởi tạo blueprint
def init_app(app, mongo_client):
    global mongo, instructors_collection, offered_courses_collection, courses_collection, registered_courses_collection, students_collection, curriculum_collection
    
    logger.info("Bắt đầu khởi tạo blueprint instructor_routes...")
    
    try:
        mongo = mongo_client
        instructors_collection = mongo.db.instructors
        offered_courses_collection = mongo.db.offered_courses
        courses_collection = mongo.db.courses
        registered_courses_collection = mongo.db.registered_courses
        students_collection = mongo.db.students
        curriculum_collection = mongo.db.curriculum
        
        logger.info("Đã khởi tạo các collection thành công")
        
        # Đăng ký blueprint với tiền tố '/api/instructor'
        app.register_blueprint(instructor_bp, url_prefix='/api/instructor')
        
        logger.info(f"Đã đăng ký blueprint instructor_bp với tiền tố '/api/instructor'")
        logger.debug(f"Các route đã đăng ký: {[rule.rule for rule in app.url_map.iter_rules() if rule.rule.startswith('/api/instructor')]}")
        
        return True
    except Exception as e:
        logger.error(f"Lỗi khi khởi tạo blueprint instructor_routes: {e}")
        raise